const _ = require("lodash");
const AWS = require("aws-sdk");
const {Command} = require("@oclif/command");

class SlsRemoveCommand extends Command {
	async run() {
		const {args} = this.parse(SlsRemoveCommand);
		const {stackName, region} = args;
    
		AWS.config.region = region;
    
		this.log(`getting the deployment bucket name for [${stackName}] in [${region}]`);
		const bucketName = await getBucketName(stackName, region);
    
		if (!bucketName) {
			throw new Error(`Stack [${stackName}] in [${region}] does not have a "ServerlessDeploymentBucketName", are you sure it was deployed with Serverless framework?`);
		}

		this.log(`emptying deployment bucket [${bucketName}]...`);
		await emptyBucket(bucketName, region);
    
		this.log(`removing the stack [${stackName}] in [${region}]...`);
		await deleteStack(stackName, region);
    
		this.log("stack has been deleted!");
	}
}

SlsRemoveCommand.description = "Deletes a CloudFormation stack that was generated by the Serverless framework";
SlsRemoveCommand.args = [
	{
		name: "stackName",
		required: true,
		description: "name of the CloudFormation stack, e.g. hello-world-dev",
	},
	{
		name: "region",
		requred: true,
		description: "AWS region, e.g. us-east-1"
	}
];

const getBucketName = async (stackName) => {
	const CloudFormation = new AWS.CloudFormation();
	const resp = await CloudFormation.describeStacks({ StackName: stackName }).promise();
	const stack = resp.Stacks[0];
	const bucketNameOutput = stack.Outputs.find(x => x.OutputKey === "ServerlessDeploymentBucketName");
	return _.get(bucketNameOutput, "OutputValue");
};

const emptyBucket = async (bucketName) => {
	const S3 = new AWS.S3();
	const listResp = await S3.listObjectsV2({
		Bucket: bucketName
	}).promise();
  
	const keys = listResp.Contents.map(x => ({ Key: x.Key }));
	await S3.deleteObjects({
		Bucket: bucketName,
		Delete: {
			Objects: keys
		}
	}).promise();
};

const deleteStack = async (stackName) => {
	const CloudFormation = new AWS.CloudFormation();
	await CloudFormation.deleteStack({
		StackName: stackName
	}).promise();
  
	await CloudFormation.waitFor("stackDeleteComplete", {
		StackName: stackName
	}).promise();
};

module.exports = SlsRemoveCommand;
